name: Docker Image

on:
  push:
    tags:
      - v*
    branches:
      - master

defaults:
  run:
    shell: bash

jobs:
  build-linux:
    name: Build & push
    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        os: [ubuntu-latest]
#        #arch: [x86_64-unknown-linux-musl|linux/amd64, aarch64-unknown-linux-musl|linux/arm64, armv7-unknown-linux-musleabihf, powerpc64le-unknown-linux-gnu]
    steps:
      #- uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME  }}
#          password: ${{ secrets.DOCKERHUB_TOKEN  }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: lippertmarkus/docuum:latest
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

#  build-windows:
#    runs-on: windows-latest
#  push-images:
#    name: Push manifest with all images
#    runs-on: ubuntu-latest
#    needs: [build-linux-arm64, build-windows, push-linux-amd64-images]
#    steps:
#      - uses: actions/checkout@v2
#      - name: Docker Login
#        uses: Azure/docker-login@v1
#        with:
#          username: ${{ secrets.DOCKERIO_USERNAME }}
#          password: ${{ secrets.DOCKERIO_PASSWORD }}
#      - name: Push Multiarch Image
#        env:
#          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
#        run: |
#          echo $(jq -c '. + { "experimental": "enabled" }' ${DOCKER_CONFIG}/config.json) > ${DOCKER_CONFIG}/config.json
#
#          docker_org=$DOCKERIO_ORG
#
#          tag=$(basename $GITHUB_REF)
#          if [ $tag = "master" ]; then
#            tag="latest"
#          fi
#
#          targets="workflow-controller argoexec argocli"
#          for target in $targets; do
#            image_name="${docker_org}/${target}:${tag}"
#
#            if [ $target = "argoexec" ]; then
#              docker manifest create $image_name ${image_name}-linux-arm64 ${image_name}-linux-amd64 ${image_name}-windows
#            else
#              docker manifest create $image_name ${image_name}-linux-arm64 ${image_name}-linux-amd64
#            fi
#
#            docker manifest push $image_name
#          done