name: Release Docker images and binaries

on:
  push:
    tags:
      - v*
    branches:
      - master

defaults:
  run:
    shell: bash

jobs:
  build-linux:
    name: Build & push for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Update docker
        run: |
          docker -v
          sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository \
             "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
             $(lsb_release -cs) \
             stable"
          sudo apt-get install docker-ce docker-ce-cli containerd.io
          docker -v

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME  }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}

      - name: Determine image name
        id: img
        env:
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          echo "::set-output name=image_name::${DOCKERHUB_ORG}/docuum:${tag}"

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.img.outputs.image_name }}
          file: ./Dockerfile.unix
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64,linux/arm/v6  # all currently supported architectures of alpine image and rustup
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Get artifacts
        env:
          IMAGE_NAME: ${{ steps.img.outputs.image_name }}
        run: |
          # enable experimental for using --platform flag
          echo $(jq -c '. + { "experimental": "enabled" }' $HOME/.docker/config.json) > $HOME/.docker/config.json
          echo $'{\n    "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

          mkdir /tmp/artifacts/
          platforms="linux/386 linux/amd64 linux/arm/v7 linux/arm64 linux/arm/v6"

          for platform in $platforms; do
            output="/tmp/artifacts/docuum-${platform//\//-}"
            id=$(docker create --platform=$platform $IMAGE_NAME)
            docker cp ${id}:/usr/local/bin/docuum $output
            shasum --algorithm 256 --binary $output > ${output}.sha256
            shasum --algorithm 256 --check --status ${output}.sha256
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: /tmp/artifacts/*

  build-windows:
    name: Build & push for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        env:
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_USERNAME }}
        id: build
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          image_name="${DOCKERHUB_ORG}/docuum:${tag}-windows"
          echo "::set-output name=image_name::$image_name"
          docker build -t $image_name -f Dockerfile.windows .
          docker push $image_name
        shell: bash

      - name: Get artifacts
        env:
          IMAGE_NAME: ${{ steps.build.outputs.image_name }}
        run: |
          mkdir artifacts/
          output="artifacts/docuum-windows-amd64.exe"
          id=$(docker create $IMAGE_NAME)
          docker cp "${id}:C:\docuum.exe" $output
          "C:\Program Files\Git\usr\bin\core_perl\shasum" --algorithm 256 --binary $output > ${output}.sha256
          "C:\Program Files\Git\usr\bin\core_perl\shasum" --algorithm 256 --check --status ${output}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: artifacts/*

  build-apple:
    name: Build for Apple
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: |
          mkdir /tmp/artifacts/
          target="x86_64-apple-darwin"
          rustup target add $target ;
          cargo install --target $target --path .
          output="/tmp/artifacts/docuum-${target}"
          cp /Users/runner/.cargo/bin/docuum $output
          shasum --algorithm 256 --binary $output > ${output}.sha256
          shasum --algorithm 256 --check --status ${output}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: /tmp/artifacts/*

  merge-manifests:
    name: Merge manifests for Linux and Windows
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME  }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}

      - name: Merge manifests
        env:
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo $(jq -c '. + { "experimental": "enabled" }' $HOME/.docker/config.json) > $HOME/.docker/config.json

          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          base_image="${DOCKERHUB_ORG}/docuum"
          image_name="${base_image}:${tag}"

          digests=$(echo $(docker manifest inspect $image_name) | jq '.manifests[].digest' -r)

          docker manifest create $image_name ${image_name}-windows $(echo "${digests//sha256:/${base_image}@sha256:}")
          docker manifest push $image_name

  create-release:
    name: Create a new release for tags
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-apple]
    if: ${{ !contains(github.ref, 'master') }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: /tmp/artifacts

      - run: |
          set -x
          assets=()
          for asset in /tmp/artifacts/*; do
            assets+=("-a" "$asset")
          done
          tag_name="${GITHUB_REF##*/}"
          hub release create "${assets[@]}" -m "$tag_name" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}