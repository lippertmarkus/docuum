# use buildplatform as rust is able to cross-compile, which is much faster then using QEMU
FROM --platform=$BUILDPLATFORM rust AS build
SHELL ["/bin/bash", "-c"]
WORKDIR /build
COPY . .
ARG TARGETPLATFORM
RUN apt update ; \
    case "$TARGETPLATFORM" in \
        "linux/amd64") \
            LINKER="x86_64-linux-gnu" ; \
            apt-get install -qq gcc-x86-64-linux-gnu ; \
            TARGET="x86_64-unknown-linux-musl"; \
            ;; \
        "linux/386") \
            LINKER="i686-linux-gnu" ; \
            apt-get install -qq gcc-$LINKER ; \
            TARGET="i686-unknown-linux-musl"; \
            ;; \
        "linux/arm/v7") \
            LINKER="arm-linux-gnueabihf" ; \
            apt-get install -qq gcc-$LINKER ; \
            TARGET="armv7-unknown-linux-musleabihf"; \
            ;; \
        "linux/arm64") \
            LINKER="aarch64-linux-gnu" ; \
            apt-get install -qq gcc-$LINKER ; \
            TARGET="aarch64-unknown-linux-musl"; \
            ;; \
        "linux/arm/v6") \
            LINKER="arm-linux-gnueabihf" ; \
            apt-get install -qq gcc-$LINKER ; \
            TARGET="arm-unknown-linux-musleabihf"; \
            ;; \
    esac ; \
    mkdir .cargo ; \
    echo "[target.$TARGET]" >> .cargo/config ; \
    echo "linker = \"${LINKER}-gcc\"" >> .cargo/config ; \
    rustup target add $TARGET ; \
    cargo install --target $TARGET --path .

# A minimal base image
FROM alpine:3.12.1
# Install the Docker CLI.
RUN apk add --no-cache docker-cli
# Set the entrypoint to Docuum. Note that Docuum is not intended to be run as
# an init process, so be sure to pass `--init` to `docker run`.
ENTRYPOINT ["/usr/local/bin/docuum"]
COPY --from=build /usr/local/cargo/bin/docuum /usr/local/bin/docuum