# Fetch the vendor with the builder platform to avoid QEMU issues (https://github.com/docker/buildx/issues/395) and allow multi-arch images
FROM --platform=$BUILDPLATFORM rust AS deps
ENV USER=root
WORKDIR /code
RUN cargo init
COPY Cargo.toml .
COPY Cargo.lock .
RUN mkdir -p /code/.cargo \
  && cargo vendor > /code/.cargo/config

FROM rust AS build
SHELL ["/bin/bash", "-c"]
WORKDIR /build
COPY . .
COPY --from=deps /code/.cargo /build/.cargo
COPY --from=deps /code/vendor /build/vendor
RUN UNAME=$(uname -m) ;\
    apt update;\
    apt install -y musl-dev musl-tools;\
    echo $UNAME ; \
    case "$UNAME" in \
        "x86_64") \
            length=$(getconf LONG_BIT) ; \
            if [[ "$length" == "64" ]]; then \
                TARGET="x86_64-unknown-linux-musl"; \
            else \
                TARGET="i686-unknown-linux-musl"; \
            fi \
            ;; \
        "armv7l") \
            TARGET="armv7-unknown-linux-musleabihf"; \
            ;; \
        "aarch64") \
            TARGET="aarch64-unknown-linux-musl"; \
            ;; \
    esac ; \
    rustup target add $TARGET ; \
    cargo install --target $TARGET --offline --path .

# A minimal base image
FROM alpine:3.12.1
# Install the Docker CLI.
RUN apk add --no-cache docker-cli
# Set the entrypoint to Docuum. Note that Docuum is not intended to be run as
# an init process, so be sure to pass `--init` to `docker run`.
ENTRYPOINT ["/usr/local/bin/docuum"]
COPY --from=build /usr/local/cargo/bin/docuum /usr/local/bin/docuum